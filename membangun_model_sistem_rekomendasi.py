# -*- coding: utf-8 -*-
"""Membangun Model Sistem Rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14j2coTPZfRVywrnZwHe5-Kpewq-CbvyT

# **Sistem Rekomendasi pada Movie Recommendation System Dataset**

##### Akan dilakukan pembangunan model sistem rekomendasi dari file csv movies dan ratings pada dataset movie recommendation system dengan url sumber data di https://www.kaggle.com/datasets/parasharmanas/movie-recommendation-system/data.

## **Import Library**
"""

# Import Library yang Dibutuhkan
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""## **Data Understanding**

##### Memahami data yang dimiliki. Pada dataset ini memiliki 2 file terpisah, yaitu film dan rating.

### Memuat Dataset
"""

# Memuat kaggle.json ke Colab
from google.colab import files
files.upload()

# Mengkonfigurasi Dataset
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Mengganti dengan Nama Dataset sesuai URL Kaggle
!kaggle datasets download -d parasharmanas/movie-recommendation-system

# Mengekstraksi File zip
!unzip movie-recommendation-system.zip

# Memuat Dataset Film
movies = pd.read_csv("movies.csv")
movies

# Memuat Dataset Rating
ratings = pd.read_csv("ratings.csv")
ratings

"""##### Output dari kode yang telah dijalankan di atas memberikan informasi sebagai berikut:


*   Terdapat dua file pada dataset movie recommendation system, yaitu movies dan ratings.   
*   Pada dataset movies, terdapat 62423 baris jumlah pengamatan dengan 3 kolom berupa 'movieId', 'title', dan 'genres' yang menunjukkan lebih dari 62 ribu jenis film dalam bentuk judul dan kategori.
*   Pada dataset ratings, terdapat 25000095 baris jumlah pengamatan dengan 4 kolom berupa 'userId', 'movieId', 'rating', dan 'timestamp' yang menunjukkan lebih dari 25 juta penonton dalam bentuk ulasan atau rating.

## **Univariate Exploratory Data Analysis**

##### Melakukan proses analisis dan eksplorasi setiap variabel pada data untuk mengetahui karakteristik masing-masing kolom variabel, baik numerik maupun kategorik.

### Deskripsi Variabel

##### Variabel-variabel pada Movie Recommendation System adalah sebagai berikut:

*   movieId: merepresentasikan tanda pengenal unik untuk setiap film.
*   title: merepresentasikan judul film yang sesuai dengan kolom movieId.
*   genres: merepresentasikan kategori film.
*   userId: merepresentasikan tanda pengenal unik penonton.
*   rating: merepresentasikan nilai rating penonton terhadap film dengan skala 0.5 hingga 5.0.
*   timestamp: merepresentasikan waktu ketika penonton memberikan ulasan atau rating.
"""

# Memuat Informasi Dataset Film
movies.info()

# Memuat Informasi Dataset Rating
ratings.info()

# Memuat Deskripsi Statistik Dataset Film
movies.describe()

# Memuat Deskripsi Statistik Dataset Rating
ratings.describe()

# Memeriksa Duplikasi Data pada Dataset Film
movies.duplicated().sum()

# Memeriksa Duplikasi Data pada Dataset Rating
ratings.duplicated().sum()

# Memeriksa Missing Value pada Dataset Film
movies.isnull().sum()

# Memeriksa Missing Value pada Dataset Rating
ratings.isnull().sum()

"""##### Fungsi describe() telah memberikan informasi statistik pada masing-masing kolom, antara lain:


*   count adalah jumlah sampel pada data.
*   mean adalah nilai rata-rata.
*   std adalah standar deviasi.
*   min adalah nilai minimum pada setiap kolom.
*   25% adalah kuartil pertama di mana kuartil merupakan nilai yang menandai batas interval dalam empat bagian sebaran yang sama.
*   50% adalah kuartil kedua atau yang biasa disebut sebagai median (nilai tengah).
*   75% adalah kuartil ketiga.
*   max adalah nilai maksimum pada setiap kolom.

##### Berdasarkan output informasi pada kedua file dataset, dapat terlihat bahwa:


*   Terdapat dua tipe data, yaitu numerikal dan kategorikal di mana variabel numerikal terletak pada kolom 'moviedId', 'userId', 'rating', dan 'timestamp' sedangkan variabel kategorikal terletak pada kolom 'title' dan 'genres'.
*  Pada kolom 'rating' di fungsi describe() dapat terlihat bahwa nilai minimum rating berupa 0.5 sedangkan nilai maksimum rating berupa 5.0 dengan nilai rata-rata sebesar 3.53 atau 3.6 kalau dibulatkan yang berarti penonton cenderung memberikan ulasan atau rating yang cukup tinggi.
* Berdasarkan fungsi duplicated().sum() pada dataset film dan rating, didapatkan bahwa tidak terdapat data duplikat pada dataset tersebut di mana setiap entri data memiliki sifat unik dan tidak mengulangi informasi yang ada.
* Berdasarkan fungsi isnull().sum() serta jumlah entri pada fungsi info() pada dataset film dan rating, didapatkan bahwa tidak terdapat missing values pada kedua dataset tersebut.

### Univariate Analysis
"""

# Memeriksa Berapa Banyak Penonton Berdasarkan 'userId'
print("Banyak user:", ratings["userId"].nunique())

# Memeriksa Berapa Banyak Entri Unik Film Berdasarkan 'movieId' dan 'title'
print("Banyak film:", movies["movieId"].nunique())
print("Banyak judul film:", movies["title"].nunique())

# Memeriksa Contoh Judul Film Berdasarkan 'title'
print("Contoh judul film:", movies["title"].unique()[:15])

# Memeriksa Jumlah Masing-Masing Rating Berdasarkan 'rating"
print("Banyak masing-masing rating pada kolom:", ratings["rating"].value_counts().sort_index())

# Visualisasi Distribusi Rating Berdasarkan 'rating'
plt.figure(figsize=(12, 6))
sns.countplot(x="rating", data=ratings, palette="viridis")
plt.title("Plot Distribusi Rating")
plt.xlabel("Rating")
plt.ylabel("Banyak")
plt.show()

# Memeriksa Berapa Banyak Genre Berdasarkan 'genres'
set_genre = set()
for genre in movies["genres"].str.split("|"):
    set_genre.update(genre)
print("Banyak genre:", len(set_genre))

# Memeriksa Genre Apa Saja yang Tertera
print("Daftar Genre:")
for genre in sorted(set_genre):
  print(".", genre)

"""##### Berdasarkan output di atas, didapatkan bahwa dataset memiliki 162541 penonton, 62423 film, serta 62325 judul film yang menunjukkan terdapat sedikit variasi penulisan judul film. Berdasarkan jumlah dan distribusi rating, didapatkan bahwa rating memiliki skala antara 0.5 hingga 5.0 dengan interval 0.5 yang berarti memiliki sistem penilaian setengah lalu didapatkan bahwa rating 4.0 mendominasi secara signifikan dengan lebih dari 6 juta ulasan atau rating. Tidak hanya itu, tetapi juga genre yang dimiliki berupa 20 genre termasuk dengan data yang belum lengkap di bagian genre.

## **Data Preprocessing**

##### Tahap persiapan data selanjutnya adalah dengan melakukan penggabungan beberapa file sehingga dapat menjadi satu kesatuan file yang utuh dan siap digunakan untuk tahap selanjutnya.

### Menggabungkan Dataset
"""

# Menggabungkan Dataset Film dan Rating Berdasarkan 'movieId'
data = pd.merge(ratings, movies, on="movieId")
data

"""##### Berdasarkan output di atas, dataset telah digabung menjadi satu kesatuan dan memiliki 25000095 baris jumlah pengamatan dengan 6 kolom variabel.

## **Data Preparation**

##### Mempersiapkan data dan melakukan beberapa teknik seperti menghapus kolom variabel 'timestamp', memeriksa dan menangani missing value, memeriksa dan menangani duplikasi data, melakukan sampling pada dataset, membuat DataFrame baru mengenai 'features_movie',mengubah kategori atau genre film menjadi representasi vektor TF-IDF, serta menghitung tingkat kemiripan dengan cosine similarity.

### Menghapus Kolom Variabel 'timestamp'

##### Kolom variabel 'timestamp' tidak diperlukan untuk pada tahap pemodelan menggunakan content based filtering karena tidak memiliki informasi yang relevan sehingga akan dihapus.
"""

# Menghapus Kolom Variabel 'timestamp'
data.drop(columns=["timestamp"], inplace=True)
data

"""##### Setelah dilakukan penghapusan kolom variabel 'timestamp', didapatkan data baru hanya memiliki 5 kolom variabel dengan jumlah pengamatan tetap pada 25000095 baris.

### Memeriksa dan Menangani Missing Values

##### Berdasarkan entries pada fungsi info() masing-masing file dataset di atas, didapatkan bahwa tidak terdapat missing values tetapi untuk memastikan akan dilakukan pemeriksaan missing value tetapi menggunakan dataset terbaru yang telah digabung dan telah dihapus untuk kolom variabel 'timestamp'.
"""

# Memeriksa Missing Values pada Dataset Terbaru
data.isnull().sum()

"""##### Berdasarkan output di atas, didapatkan bahwa tidak terdapat missing value sehingga tidak perlu dilakukan penanganan missing values.

### Memeriksa dan Menangani Duplikasi Data

##### Berdasarkan pemeriksaan duplikasi pada masing-masing file dataset film dan rating di atas, didapatkan bahwa tidak terdapat duplikasi data tetapi untuk memastikan akan dilakukan pemeriksaan duplikasi data tetapi menggunakan dataset terbaru yang telah digabung dan telah dihapus kolom variabel 'timestamp'.
"""

# Memeriksa Duplikasi Data pada Dataset Terbaru
data.duplicated().sum()

"""##### Berdasarkan output di atas, didapatkan bahwa tidak terdapat duplikasi data sehingga tidak diperlukan penanganan duplikasi data.

### Melakukan Sampling pada Dataset

##### Dataset yang terbaru memiliki ukuran data yang besar sehingga perlu dilakukan pengambilan sampel acak sebanyak 500000 baris dari dataset supaya tahapan selanjutnya dapat berjalan lebih efisien dengan pengaturan random_state untuk memastikan hasil sampling sama setiap dijalankan supaya tetap konsisten.
"""

# Melakukan Sampling Dataset
data_sampling = data.sample(n=500000, random_state=42).copy()
data_sampling

"""##### Berdasarkan output di atas, didapatkan bahwa DataFrame data_sampling berhasil dibuat dengan 500000 baris jumlah pengamatan dengan tetap 5 kolom variabel.

### Membuat DataFrame Baru tentang 'features_movie'

##### Pada tahap pemodelan akan menggunakan content based filtering maka diperlukan membuat DataFrame baru yang memuat kolom variabel 'movieId', 'title', dan 'genres'.
"""

# Membuat DataFrame Baru
features_movie = data_sampling.drop_duplicates("movieId")[["movieId", "title", "genres"]].reset_index(drop=True)
features_movie

"""##### Berdasarkan output di atas, dapat terlihat bahwa DataFrame baru berhasil dibuat dengan memuat 3 kolom variabel berupa 'movieId', 'title', dan 'genres' sebanyak 18205 baris jumlah pengamatan.

### TF-IDF dan Cosine Similarity

##### Pada tahap pemodelan akan menggunakan content based filtering maka diperlukan mengubah kategori atau genre film menjadi representasi fitur penting dengan TF-IDF serta menghitung tingkat kesamaan dengan Cosine Similarity.
"""

# Inisialisasi TfidfVectorizer
tfidf = TfidfVectorizer(token_pattern=r"(?u)\b\w+\b")

# Melakukan Perhitungan idf pada Kolom Variabel 'genres'
tfidf.fit(features_movie["genres"])

# Memuat Nama Fitur pada Kolom Variabel 'genres'
print("Nama fitur (genres):", tfidf.get_feature_names_out())

# Melakukan fit lalu Ditransformasikan ke Bentuk Matriks
tfidf_matrix = tfidf.fit_transform(features_movie["genres"])

# Memuat Ukuran Matriks tfidf
tfidf_matrix.shape

# Menghitung Cosine Similarity
cos_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Memeriksa Bentuk Atribut Matriks Cosine Similarity
print("Bentuk Matriks Cosine Similarity:", cos_sim.shape)

"""##### Berdasarkan output di atas, didapatkan bahwa kategori film berhasil diubah menjadi representasi vektor TF-IDF dengan nama fitur penting yang tertera pada output serta ukuran matriks tfidf (18205, 24) yang berarti terdapat 18205 baris jumlah pengamatan dengan 24 kolom kategori film. Lalu, juga berhasil dihitung tingkat kesamaan atau kemiripan antar film berdasarkan kategori film menggunakan cosine similarity dengan bentuk matriks (18205, 18205) untuk memungkinkan sistem mengenali film yang mirip secara konten pada tahap selanjutnya.

## **Model Development**

##### Mengembangkan sistem rekomendasi dengan teknik content based filtering untuk merekomendasikan film yang mirip atau sama dengan konten antar film lainnya seperti genre.

### Model Sistem Rekomendasi Berdasarkan Kategori atau Genre Film
"""

# Rekomendasi Berdasarkan Kategori Film
def genre_recommendations(input_genres, top_n=10):
  masked_genres = features_movie["genres"].str.contains(input_genres, case=False, na=False)
  movies_matching = features_movie[masked_genres]

  if movies_matching.empty:
    print(f"Tidak terdapat film dengan genre '{input_genres}'")
    return

  tf = movies_matching.index[0]
  cosin_sim = list(enumerate(cos_sim[tf]))
  cosin_sim = [x for x in cosin_sim if x[0] != tf]
  cosin_sim = sorted(cosin_sim, key=lambda x: x[1], reverse=True) [:top_n]

  print(f"Film-film mirip yang direkomendasikan berdasarkan genre '{input_genres}'")
  print(f"Title: {features_movie.iloc[tf]['title']} | Genre: {features_movie.iloc[tf]['genres']}")

  for i, (movies_tf, _) in enumerate(cosin_sim, start=1):
    titles = features_movie.iloc[movies_tf]["title"]
    genres = features_movie.iloc[movies_tf]["genres"]
    print(f"{i}. {titles} | Genre: {genres}")

"""### Model Sistem Rekomendasi Berdasarkan Judul Film"""

# Rekomendasi Berdasarkan Judul Film
def title_recommendations(titles, top_n=10):
  matched_titles = features_movie[features_movie["title"].str.lower() == titles.lower()]
  if matched_titles.empty:
    print("Tidak terdapat judul film")
    return

  tf = matched_titles.index[0]
  cosin_sim = list(enumerate(cos_sim[tf]))
  cosin_sim = [x for x in cosin_sim if x[0] != tf]
  cosin_sim = sorted(cosin_sim, key=lambda x: x[1], reverse=True) [:top_n]

  print(f"Film yang direkomendasikan berdasarkan: {features_movie.iloc[tf]['title']} | Genre: {features_movie.iloc[tf]['genres']}")

  for i, (movies_tf, _) in enumerate(cosin_sim, start=1):
    titles_reccomend = features_movie.iloc[movies_tf]["title"]
    genres_reccomend = features_movie.iloc[movies_tf]["genres"]
    print(f"{i}. {titles_reccomend} | Genre: {genres_reccomend}")

"""## **Evaluasi Model**

##### Metrik yang akan digunakan pada sistem rekomendasi film ini adalah presisi sistem rekomendasi yang menghitung jumlah rekomendasi item yang relevan dibagi dengan jumlah total item yang direkomendasikan.

### Evaluasi Model Sistem Rekomendasi Berdasarkan Kategori atau Genre Film
"""

# Evaluasi Sistem Rekomendasi Kategori Film
genre_recommendations("Thriller")

"""### Evaluasi Model Sistem Rekomendasi Berdasarkan Judul Film"""

# Evaluasi Sistem Rekomendasi Judul Film
title_recommendations("Steal This Film II (2007)")

"""##### Berdasarkan output di atas, didapatkan bahwa model content based learning berhasil merekomendasikan 100% judul film dengan kategori film yang konsisten seperti Horror|Thriller dan Documentary yang tertera di atas yang berarti menunjukkan bahwa model telah bekerja dengan efektif dalam mengenali kemiripan kategori atau genre film beserta judul film."""